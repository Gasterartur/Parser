require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const puppeteer = require("puppeteer");
const sqlite3 = require("sqlite3").verbose();
const fs = require("fs");

// üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID; // ID –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

// üîπ –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });

// üîπ –ü–æ–¥–∫–ª—é—á–∞–µ–º SQLite
const dbFile = "./prices.db";
const dbExists = fs.existsSync(dbFile);
const db = new sqlite3.Database(dbFile);

// üìå –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—à–∏ —Ü–µ–Ω—ã (owner_links)
async function loadOurPrices() {
    return new Promise((resolve, reject) => {
        db.all("SELECT id, model_name, price1 FROM owner_links", [], (err, rows) => {
            if (err) reject(err);
            resolve(rows);
        });
    });
}

// üìå –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Å—ã–ª–∫–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ (partners_links)
async function loadCompetitorPrices() {
    return new Promise((resolve, reject) => {
        db.all("SELECT id, model_name, url, html_tags1, html_tags2, last_price1 FROM partners_links", [], (err, rows) => {
            if (err) reject(err);
            resolve(rows);
        });
    });
}

// üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É –Ω–∞ —Å–∞–π—Ç–µ
async function checkPrice(url, selector1, selector2) {
    const browser = await puppeteer.launch({ headless: "new" });
    const page = await browser.newPage();
    await page.goto(url, { waitUntil: "domcontentloaded" });

    try {
        let price = null;

        if (selector1) {
            price = await page.$eval(selector1, el => parseFloat(el.textContent.trim().replace(/\D/g, "")));
        }
        if (!price && selector2) {
            price = await page.$eval(selector2, el => parseFloat(el.textContent.trim().replace(/\D/g, "")));
        }
        if (!price) {
            price = await page.$eval(".price_value", el => parseFloat(el.textContent.trim().replace(/\D/g, "")));
        }

        await browser.close();
        return price;
    } catch (error) {
        await browser.close();
        return null; // –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã
    }
}

// üìå –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω
async function checkAllPrices() {
    const ourPrices = await loadOurPrices();
    const competitorPrices = await loadCompetitorPrices();
    let messages = [];

    for (const competitor of competitorPrices) {
        const ourProduct = ourPrices.find(p => p.model_name === competitor.model_name);

        if (!ourProduct) continue; // –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

        try {
            const newPrice = await checkPrice(competitor.url, competitor.html_tags1, competitor.html_tags2);
            if (newPrice === null) continue; // –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω—ã

            console.log(`üîç ${competitor.model_name}: ${competitor.last_price1} ‚Üí ${newPrice}`);

            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            if (newPrice !== competitor.last_price1) {
                db.run(
                    "UPDATE partners_links SET last_price1 = ?, last_update = strftime('%s', 'now') WHERE id = ?",
                    [newPrice, competitor.id]
                );

                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
                db.run(
                    "INSERT INTO history_prices (owner_links__id, partner_links__id, model_name, time, price1, price2, status) VALUES (?, ?, ?, strftime('%s', 'now'), ?, ?, 'updated')",
                    [ourProduct.id, competitor.id, competitor.model_name, ourProduct.price1, newPrice]
                );

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É —Ü–µ–Ω
                if (newPrice < ourProduct.price1) {
                    const diff = ourProduct.price1 - newPrice;
                    messages.push(`‚ö†Ô∏è –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç —Å–Ω–∏–∑–∏–ª —Ü–µ–Ω—É: ${competitor.model_name}\nüîπ –ò—Ö —Ü–µ–Ω–∞: ${newPrice} ‚ÇΩ\nüîπ –ù–∞—à–∞ —Ü–µ–Ω–∞: ${ourProduct.price1} ‚ÇΩ\nüîª –†–∞–∑–Ω–∏—Ü–∞: ${diff} ‚ÇΩ`);
                }
            }

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:", error);
        }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if (messages.length > 0) {
        bot.sendMessage(ADMIN_CHAT_ID, messages.join("\n\n"));
    }
}

// üìå –ö–æ–º–∞–Ω–¥–∞ /check –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä—É—á–Ω—É—é
bot.onText(/\/check/, async msg => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, "‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Ü–µ–Ω—ã...");
    await checkAllPrices();
    bot.sendMessage(chatId, "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
});

// üìå –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
setInterval(checkAllPrices, 600000);

// üìå –ó–∞–ø—É—Å–∫
console.log("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
