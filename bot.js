require("dotenv").config();
const puppeteer = require("puppeteer");
const TelegramBot = require("node-telegram-bot-api");
const cron = require("node-cron");
const fs = require("fs-extra");

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

// üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
const SUBSCRIPTIONS_FILE = "subscriptions.json";
let subscriptions = fs.existsSync(SUBSCRIPTIONS_FILE) ? fs.readJsonSync(SUBSCRIPTIONS_FILE) : [];

// üîç –§—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
const scrapers = {
    wildberries: async (url) => {
        const browser = await puppeteer.launch({ headless: true });
        const page = await browser.newPage();
        await page.goto(url, { waitUntil: "domcontentloaded" });

        try {
            await page.waitForSelector(".price-block__final-price");
            const priceText = await page.$eval(".price-block__final-price", el => el.innerText);
            const price = parseInt(priceText.replace(/\D/g, ""), 10);
            await browser.close();
            return price;
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Wildberries:", error);
            await browser.close();
            return null;
        }
    },

    ozon: async (url) => {
        const browser = await puppeteer.launch({ headless: true });
        const page = await browser.newPage();
        await page.goto(url, { waitUntil: "domcontentloaded" });

        try {
            await page.waitForSelector("[data-widget='webPrice'] span");
            const priceText = await page.$eval("[data-widget='webPrice'] span", el => el.innerText);
            const price = parseInt(priceText.replace(/\D/g, ""), 10);
            await browser.close();
            return price;
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Ozon:", error);
            await browser.close();
            return null;
        }
    },

    aliexpress: async (url) => {
        const browser = await puppeteer.launch({ headless: true });
        const page = await browser.newPage();
        await page.goto(url, { waitUntil: "domcontentloaded" });

        try {
            await page.waitForSelector(".product-price-current");
            const priceText = await page.$eval(".product-price-current", el => el.innerText);
            const price = parseInt(priceText.replace(/\D/g, ""), 10);
            await browser.close();
            return price;
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ AliExpress:", error);
            await browser.close();
            return null;
        }
    }
};

// üîî –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function checkPrices() {
    for (const sub of subscriptions) {
        if (!scrapers[sub.site]) continue;

        const currentPrice = await scrapers[sub.site](sub.url);
        if (currentPrice && currentPrice <= sub.targetPrice) {
            bot.sendMessage(sub.chatId, `üî• –¶–µ–Ω–∞ –Ω–∞ *${sub.name}* —É–ø–∞–ª–∞ –¥–æ ${currentPrice}‚ÇΩ!\nüîó [–ö—É–ø–∏—Ç—å](${sub.url})`, { parse_mode: "Markdown" });
        }
    }
}

// ‚è≥ –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
cron.schedule("*/5 * * * *", async () => {
    console.log("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω...");
    await checkPrices();
});

// üì≤ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
bot.onText(/\/subscribe (.+) (.+) (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const site = match[1];
    const url = match[2];
    const targetPrice = parseInt(match[3]);

    if (!scrapers[site]) {
        return bot.sendMessage(chatId, "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ: wildberries, ozon, aliexpress");
    }

    const productName = url.split("/").slice(-1)[0]; // –ò–º—è —Ç–æ–≤–∞—Ä–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ–µ)
    subscriptions.push({ chatId, site, url, targetPrice, name: productName });

    fs.writeJsonSync(SUBSCRIPTIONS_FILE, subscriptions);
    bot.sendMessage(chatId, `‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ *${productName}* –ø–æ —Ü–µ–Ω–µ ${targetPrice}‚ÇΩ`);
});

// üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–ø–∏—Å–æ–∫
bot.onText(/\/subscriptions/, (msg) => {
    const chatId = msg.chat.id;
    const userSubs = subscriptions.filter(sub => sub.chatId === chatId);

    if (userSubs.length === 0) return bot.sendMessage(chatId, "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.");

    let message = "üìå –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n";
    userSubs.forEach((sub, index) => {
        message += `*${index + 1}.* ${sub.name} ‚Äî —Ü–µ–ª—å: ${sub.targetPrice}‚ÇΩ\nüîó [–°—Å—ã–ª–∫–∞](${sub.url})\n\n`;
    });

    bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
});

// üóë –û—Ç–ø–∏—Å–∫–∞
bot.onText(/\/unsubscribe (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const index = parseInt(match[1]) - 1;
    const userSubs = subscriptions.filter(sub => sub.chatId === chatId);

    if (!userSubs[index]) return bot.sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏.");

    const subToRemove = userSubs[index];
    subscriptions = subscriptions.filter(sub => !(sub.chatId === chatId && sub.url === subToRemove.url));

    fs.writeJsonSync(SUBSCRIPTIONS_FILE, subscriptions);
    bot.sendMessage(chatId, `‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ *${subToRemove.name}* —É–¥–∞–ª–µ–Ω–∞.`);
});

// üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
console.log("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
